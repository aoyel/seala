-- MySQL dump 10.13  Distrib 5.7.11, for linux-glibc2.5 (x86_64)
--
-- Host: localhost    Database: seala
-- ------------------------------------------------------
-- Server version	5.7.11

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` char(80) NOT NULL,
  `create_time` bigint(11) NOT NULL,
  `description` varchar(255) DEFAULT NULL,
  `view_count` int(11) NOT NULL DEFAULT '0',
  `comment_count` int(11) NOT NULL DEFAULT '0',
  `like_count` int(11) NOT NULL DEFAULT '0',
  `type` tinyint(2) NOT NULL,
  `status` tinyint(2) NOT NULL,
  `content` text NOT NULL,
  `is_delete` int(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'地图检索在Bootstrap－Dialog中遇到的问题',1,'地图检索在Bootstrap－Dialog中遇到的问题',9,0,0,1,1,'地图检索在Bootstrap－Dialog中遇到的问题',0),(2,'haha',1457794380,NULL,1,0,0,1,1,'haha',0),(3,'post a new message',1457794618,NULL,3,0,0,1,1,'post a new message',0),(4,'this is title',1457798875,NULL,4,0,0,1,1,'',0),(5,'1233',1457799011,NULL,0,0,0,1,1,'12312',0),(6,'1233',1457799026,NULL,0,0,0,1,1,'12312\n```\nhehe\n```',0),(7,'',1457799182,NULL,0,0,0,1,1,'```\nif(a = 1){\n	echo \"c\";\n}\n```\n',0),(8,'123133',1457799444,NULL,5,0,0,1,1,'<p>21321</p>\n<pre><code>123</code></pre>\n<p>213123</p>\n',0),(9,'',1457799904,NULL,0,0,0,1,1,'<p>111]p\n00\n00</p>\n<p>0\n0\n0\n0\n0</p>\n',0),(10,'mysql',1457800402,NULL,81,0,0,1,1,'<h1 id=\"mysql\">mysql</h1>\n<p><a href=\"https://npmjs.org/package/mysql\"><img src=\"https://img.shields.io/npm/v/mysql.svg\" alt=\"NPM Version\"></a>\n<a href=\"https://npmjs.org/package/mysql\"><img src=\"https://img.shields.io/npm/dm/mysql.svg\" alt=\"NPM Downloads\"></a>\n<a href=\"http://nodejs.org/download/\"><img src=\"http://img.shields.io/node/v/mysql.svg\" alt=\"Node.js Version\"></a>\n<a href=\"https://travis-ci.org/felixge/node-mysql\"><img src=\"https://img.shields.io/travis/felixge/node-mysql/master.svg?label=linux\" alt=\"Linux Build\"></a>\n<a href=\"https://ci.appveyor.com/project/dougwilson/node-mysql\"><img src=\"https://img.shields.io/appveyor/ci/dougwilson/node-mysql/master.svg?label=windows\" alt=\"Windows Build\"></a>\n<a href=\"https://coveralls.io/r/felixge/node-mysql?branch=master\"><img src=\"https://img.shields.io/coveralls/felixge/node-mysql/master.svg\" alt=\"Test Coverage\"></a></p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#install\">Install</a></li>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#contributors\">Contributors</a></li>\n<li><a href=\"#sponsors\">Sponsors</a></li>\n<li><a href=\"#community\">Community</a></li>\n<li><a href=\"#establishing-connections\">Establishing connections</a></li>\n<li><a href=\"#connection-options\">Connection options</a></li>\n<li><a href=\"#ssl-options\">SSL options</a></li>\n<li><a href=\"#terminating-connections\">Terminating connections</a></li>\n<li><a href=\"#pooling-connections\">Pooling connections</a></li>\n<li><a href=\"#pool-options\">Pool options</a></li>\n<li><a href=\"#pool-events\">Pool events</a></li>\n<li><a href=\"#closing-all-the-connections-in-a-pool\">Closing all the connections in a pool</a></li>\n<li><a href=\"#poolcluster\">PoolCluster</a></li>\n<li><a href=\"#poolcluster-option\">PoolCluster Option</a></li>\n<li><a href=\"#switching-users-and-altering-connection-state\">Switching users and altering connection state</a></li>\n<li><a href=\"#server-disconnects\">Server disconnects</a></li>\n<li><a href=\"#performing-queries\">Performing queries</a></li>\n<li><a href=\"#escaping-query-values\">Escaping query values</a></li>\n<li><a href=\"#escaping-query-identifiers\">Escaping query identifiers</a></li>\n<li><a href=\"#preparing-queries\">Preparing Queries</a></li>\n<li><a href=\"#custom-format\">Custom format</a></li>\n<li><a href=\"#getting-the-id-of-an-inserted-row\">Getting the id of an inserted row</a></li>\n<li><a href=\"#getting-the-number-of-affected-rows\">Getting the number of affected rows</a></li>\n<li><a href=\"#getting-the-number-of-changed-rows\">Getting the number of changed rows</a></li>\n<li><a href=\"#getting-the-connection-id\">Getting the connection ID</a></li>\n<li><a href=\"#executing-queries-in-parallel\">Executing queries in parallel</a></li>\n<li><a href=\"#streaming-query-rows\">Streaming query rows</a></li>\n<li><a href=\"#piping-results-with-streams2\">Piping results with Streams2</a></li>\n<li><a href=\"#multiple-statement-queries\">Multiple statement queries</a></li>\n<li><a href=\"#stored-procedures\">Stored procedures</a></li>\n<li><a href=\"#joins-with-overlapping-column-names\">Joins with overlapping column names</a></li>\n<li><a href=\"#transactions\">Transactions</a></li>\n<li><a href=\"#timeouts\">Timeouts</a></li>\n<li><a href=\"#error-handling\">Error handling</a></li>\n<li><a href=\"#exception-safety\">Exception Safety</a></li>\n<li><a href=\"#type-casting\">Type casting</a></li>\n<li><a href=\"#connection-flags\">Connection Flags</a></li>\n<li><a href=\"#debugging-and-reporting-problems\">Debugging and reporting problems</a></li>\n<li><a href=\"#running-tests\">Running tests</a></li>\n<li><a href=\"#todo\">Todo</a></li>\n</ul>\n<h2 id=\"install\">Install</h2>\n<pre><code class=\"lang-sh\">$ npm install mysql</code></pre>\n<p>For information about the previous 0.9.x releases, visit the <a href=\"https://github.com/felixge/node-mysql/tree/v0.9\">v0.9 branch</a>.</p>\n<p>Sometimes I may also ask you to install the latest version from Github to check\nif a bugfix is working. In this case, please do:</p>\n<pre><code class=\"lang-sh\">$ npm install felixge/node-mysql</code></pre>\n<h2 id=\"introduction\">Introduction</h2>\n<p>This is a node.js driver for mysql. It is written in JavaScript, does not\nrequire compiling, and is 100% MIT licensed.</p>\n<p>Here is an example on how to use it:</p>\n<pre><code class=\"lang-js\">var mysql      = require(&#39;mysql&#39;);\nvar connection = mysql.createConnection({\n  host     : &#39;localhost&#39;,\n  user     : &#39;me&#39;,\n  password : &#39;secret&#39;,\n  database : &#39;my_db&#39;\n});\n\nconnection.connect();\n\nconnection.query(&#39;SELECT 1 + 1 AS solution&#39;, function(err, rows, fields) {\n  if (err) throw err;\n\n  console.log(&#39;The solution is: &#39;, rows[0].solution);\n});\n\nconnection.end();</code></pre>\n<p>From this example, you can learn the following:</p>\n<ul>\n<li>Every method you invoke on a connection is queued and executed in sequence.</li>\n<li>Closing the connection is done using <code>end()</code> which makes sure all remaining\nqueries are executed before sending a quit packet to the mysql server.</li>\n</ul>\n<h2 id=\"contributors\">Contributors</h2>\n<p>Thanks goes to the people who have contributed code to this module, see the\n<a href=\"https://github.com/felixge/node-mysql/graphs/contributors\">GitHub Contributors page</a>.</p>\n<p>Additionally I&#39;d like to thank the following people:</p>\n<ul>\n<li><a href=\"http://andrey.hristov.com/\">Andrey Hristov</a> (Oracle) - for helping me with protocol questions.</li>\n<li><a href=\"http://blog.ulf-wendel.de/\">Ulf Wendel</a> (Oracle) - for helping me with protocol questions.</li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<p>The following companies have supported this project financially, allowing me to\nspend more time on it (ordered by time of contribution):</p>\n<ul>\n<li><a href=\"http://transloadit.com\">Transloadit</a> (my startup, we do file uploading &amp;\nvideo encoding as a service, check it out)</li>\n<li><a href=\"http://www.joyent.com/\">Joyent</a></li>\n<li><a href=\"http://pinkbike.com/\">pinkbike.com</a></li>\n<li><a href=\"http://www.holidayextras.co.uk/\">Holiday Extras</a> (they are <a href=\"http://join.holidayextras.co.uk/\">hiring</a>)</li>\n<li><a href=\"http://newscope.com/\">Newscope</a> (they are <a href=\"http://www.newscope.com/stellenangebote\">hiring</a>)</li>\n</ul>\n<p>If you are interested in sponsoring a day or more of my time, please\n<a href=\"http://felixge.de/#consulting\">get in touch</a>.</p>\n<h2 id=\"community\">Community</h2>\n<p>If you&#39;d like to discuss this module, or ask questions about it, please use one\nof the following:</p>\n<ul>\n<li><strong>Mailing list</strong>: <a href=\"https://groups.google.com/forum/#!forum/node-mysql\">https://groups.google.com/forum/#!forum/node-mysql</a></li>\n<li><strong>IRC Channel</strong>: #node.js (on freenode.net, I pay attention to any message\nincluding the term <code>mysql</code>)</li>\n</ul>\n<h2 id=\"establishing-connections\">Establishing connections</h2>\n<p>The recommended way to establish a connection is this:</p>\n<pre><code class=\"lang-js\">var mysql      = require(&#39;mysql&#39;);\nvar connection = mysql.createConnection({\n  host     : &#39;example.org&#39;,\n  user     : &#39;bob&#39;,\n  password : &#39;secret&#39;\n});\n\nconnection.connect(function(err) {\n  if (err) {\n    console.error(&#39;error connecting: &#39; + err.stack);\n    return;\n  }\n\n  console.log(&#39;connected as id &#39; + connection.threadId);\n});</code></pre>\n<p>However, a connection can also be implicitly established by invoking a query:</p>\n<pre><code class=\"lang-js\">var mysql      = require(&#39;mysql&#39;);\nvar connection = mysql.createConnection(...);\n\nconnection.query(&#39;SELECT 1&#39;, function(err, rows) {\n  // connected! (unless `err` is set)\n});</code></pre>\n<p>Depending on how you like to handle your errors, either method may be\nappropriate. Any type of connection error (handshake or network) is considered\na fatal error, see the <a href=\"#error-handling\">Error Handling</a> section for more\ninformation.</p>\n<h2 id=\"connection-options\">Connection options</h2>\n<p>When establishing a connection, you can set the following options:</p>\n<ul>\n<li><code>host</code>: The hostname of the database you are connecting to. (Default:\n<code>localhost</code>)</li>\n<li><code>port</code>: The port number to connect to. (Default: <code>3306</code>)</li>\n<li><code>localAddress</code>: The source IP address to use for TCP connection. (Optional)</li>\n<li><code>socketPath</code>: The path to a unix domain socket to connect to. When used <code>host</code>\nand <code>port</code> are ignored.</li>\n<li><code>user</code>: The MySQL user to authenticate as.</li>\n<li><code>password</code>: The password of that MySQL user.</li>\n<li><code>database</code>: Name of the database to use for this connection (Optional).</li>\n<li><code>charset</code>: The charset for the connection. This is called &quot;collation&quot; in the SQL-level\nof MySQL (like <code>utf8_general_ci</code>). If a SQL-level charset is specified (like <code>utf8mb4</code>)\nthen the default collation for that charset is used. (Default: <code>&#39;UTF8_GENERAL_CI&#39;</code>)</li>\n<li><code>timezone</code>: The timezone used to store local dates. (Default: <code>&#39;local&#39;</code>)</li>\n<li><code>connectTimeout</code>: The milliseconds before a timeout occurs during the initial connection\nto the MySQL server. (Default: <code>10000</code>)</li>\n<li><code>stringifyObjects</code>: Stringify objects instead of converting to values. See\nissue <a href=\"https://github.com/felixge/node-mysql/issues/501\">#501</a>. (Default: <code>&#39;false&#39;</code>)</li>\n<li><code>insecureAuth</code>: Allow connecting to MySQL instances that ask for the old\n(insecure) authentication method. (Default: <code>false</code>)</li>\n<li><code>typeCast</code>: Determines if column values should be converted to native\n JavaScript types. (Default: <code>true</code>)</li>\n<li><code>queryFormat</code>: A custom query format function. See <a href=\"#custom-format\">Custom format</a>.</li>\n<li><code>supportBigNumbers</code>: When dealing with big numbers (BIGINT and DECIMAL columns) in the database,\nyou should enable this option (Default: <code>false</code>).</li>\n<li><code>bigNumberStrings</code>: Enabling both <code>supportBigNumbers</code> and <code>bigNumberStrings</code> forces big numbers\n(BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: <code>false</code>).\nEnabling <code>supportBigNumbers</code> but leaving <code>bigNumberStrings</code> disabled will return big numbers as String\nobjects only when they cannot be accurately represented with [JavaScript Number objects] (<a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_8.5\">http://ecma262-5.com/ELS5_HTML.htm#Section_8.5</a>)\n(which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as\nNumber objects. This option is ignored if <code>supportBigNumbers</code> is disabled.</li>\n<li><code>dateStrings</code>: Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather then\n inflated into JavaScript Date objects. (Default: <code>false</code>)</li>\n<li><code>debug</code>: Prints protocol details to stdout. (Default: <code>false</code>)</li>\n<li><code>trace</code>: Generates stack traces on <code>Error</code> to include call site of library\n entrance (&quot;long stack traces&quot;). Slight performance penalty for most calls.\n (Default: <code>true</code>)</li>\n<li><code>multipleStatements</code>: Allow multiple mysql statements per query. Be careful\nwith this, it could increase the scope of SQL injection attacks. (Default: <code>false</code>)</li>\n<li><code>flags</code>: List of connection flags to use other than the default ones. It is\nalso possible to blacklist default ones. For more information, check\n<a href=\"#connection-flags\">Connection Flags</a>.</li>\n<li><code>ssl</code>: object with ssl parameters or a string containing name of ssl profile. See <a href=\"#ssl-options\">SSL options</a>.</li>\n</ul>\n<p>In addition to passing these options as an object, you can also use a url\nstring. For example:</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection(&#39;mysql://user:pass@host/db?debug=true&amp;charset=BIG5_CHINESE_CI&amp;timezone=-0700&#39;);</code></pre>\n<p>Note: The query values are first attempted to be parsed as JSON, and if that\nfails assumed to be plaintext strings.</p>\n<h3 id=\"ssl-options\">SSL options</h3>\n<p>The <code>ssl</code> option in the connection options takes a string or an object. When given a string,\nit uses one of the predefined SSL profiles included. The following profiles are included:</p>\n<ul>\n<li><code>&quot;Amazon RDS&quot;</code>: this profile is for connecting to an Amazon RDS server and contains the\ncertificates from <a href=\"https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem\">https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem</a> and\n<a href=\"https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem\">https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem</a></li>\n</ul>\n<p>When connecting to other servers, you will need to provide an object of options, in the\nsame format as <a href=\"http://nodejs.org/api/crypto.html#crypto_crypto_createcredentials_details\">crypto.createCredentials</a>.\nPlease note the arguments expect a string of the certificate, not a file name to the\ncertificate. Here is a simple example:</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection({\n  host : &#39;localhost&#39;,\n  ssl  : {\n    ca : fs.readFileSync(__dirname + &#39;/mysql-ca.crt&#39;)\n  }\n});</code></pre>\n<p>You can also connect to a MySQL server without properly providing the appropriate\nCA to trust. <em>You should not do this</em>.</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection({\n  host : &#39;localhost&#39;,\n  ssl  : {\n    // DO NOT DO THIS\n    // set up your ca correctly to trust the connection\n    rejectUnauthorized: false\n  }\n});</code></pre>\n<h2 id=\"terminating-connections\">Terminating connections</h2>\n<p>There are two ways to end a connection. Terminating a connection gracefully is\ndone by calling the <code>end()</code> method:</p>\n<pre><code class=\"lang-js\">connection.end(function(err) {\n  // The connection is terminated now\n});</code></pre>\n<p>This will make sure all previously enqueued queries are still before sending a\n<code>COM_QUIT</code> packet to the MySQL server. If a fatal error occurs before the\n<code>COM_QUIT</code> packet can be sent, an <code>err</code> argument will be provided to the\ncallback, but the connection will be terminated regardless of that.</p>\n<p>An alternative way to end the connection is to call the <code>destroy()</code> method.\nThis will cause an immediate termination of the underlying socket.\nAdditionally <code>destroy()</code> guarantees that no more events or callbacks will be\ntriggered for the connection.</p>\n<pre><code class=\"lang-js\">connection.destroy();</code></pre>\n<p>Unlike <code>end()</code> the <code>destroy()</code> method does not take a callback argument.</p>\n<h2 id=\"pooling-connections\">Pooling connections</h2>\n<p>Use pool directly.</p>\n<pre><code class=\"lang-js\">var mysql = require(&#39;mysql&#39;);\nvar pool  = mysql.createPool({\n  connectionLimit : 10,\n  host            : &#39;example.org&#39;,\n  user            : &#39;bob&#39;,\n  password        : &#39;secret&#39;\n});\n\npool.query(&#39;SELECT 1 + 1 AS solution&#39;, function(err, rows, fields) {\n  if (err) throw err;\n\n  console.log(&#39;The solution is: &#39;, rows[0].solution);\n});</code></pre>\n<p>Connections can be pooled to ease sharing a single connection, or managing\nmultiple connections.</p>\n<pre><code class=\"lang-js\">var mysql = require(&#39;mysql&#39;);\nvar pool  = mysql.createPool({\n  host     : &#39;example.org&#39;,\n  user     : &#39;bob&#39;,\n  password : &#39;secret&#39;\n});\n\npool.getConnection(function(err, connection) {\n  // connected! (unless `err` is set)\n});</code></pre>\n<p>When you are done with a connection, just call <code>connection.release()</code> and the\nconnection will return to the pool, ready to be used again by someone else.</p>\n<pre><code class=\"lang-js\">var mysql = require(&#39;mysql&#39;);\nvar pool  = mysql.createPool(...);\n\npool.getConnection(function(err, connection) {\n  // Use the connection\n  connection.query( &#39;SELECT something FROM sometable&#39;, function(err, rows) {\n    // And done with the connection.\n    connection.release();\n\n    // Don&#39;t use the connection here, it has been returned to the pool.\n  });\n});</code></pre>\n<p>If you would like to close the connection and remove it from the pool, use\n<code>connection.destroy()</code> instead. The pool will create a new connection the next\ntime one is needed.</p>\n<p>Connections are lazily created by the pool. If you configure the pool to allow\nup to 100 connections, but only ever use 5 simultaneously, only 5 connections\nwill be made. Connections are also cycled round-robin style, with connections\nbeing taken from the top of the pool and returning to the bottom.</p>\n<p>When a previous connection is retrieved from the pool, a ping packet is sent\nto the server to check if the connection is still good.</p>\n<h2 id=\"pool-options\">Pool options</h2>\n<p>Pools accept all the same options as a connection. When creating a new\nconnection, the options are simply passed to the connection constructor. In\naddition to those options pools accept a few extras:</p>\n<ul>\n<li><code>acquireTimeout</code>: The milliseconds before a timeout occurs during the connection\nacquisition. This is slightly different from <code>connectTimeout</code>, because acquiring\na pool connection does not always involve making a connection. (Default: <code>10000</code>)</li>\n<li><code>waitForConnections</code>: Determines the pool&#39;s action when no connections are\navailable and the limit has been reached. If <code>true</code>, the pool will queue the\nconnection request and call it when one becomes available. If <code>false</code>, the\npool will immediately call back with an error. (Default: <code>true</code>)</li>\n<li><code>connectionLimit</code>: The maximum number of connections to create at once.\n(Default: <code>10</code>)</li>\n<li><code>queueLimit</code>: The maximum number of connection requests the pool will queue\nbefore returning an error from <code>getConnection</code>. If set to <code>0</code>, there is no\nlimit to the number of queued connection requests. (Default: <code>0</code>)</li>\n</ul>\n<h2 id=\"pool-events\">Pool events</h2>\n<h3 id=\"connection\">connection</h3>\n<p>The pool will emit a <code>connection</code> event when a new connection is made within the pool. \nIf you need to set session variables on the connection before it gets used, you can\nlisten to the <code>connection</code> event.</p>\n<pre><code class=\"lang-js\">pool.on(&#39;connection&#39;, function (connection) {\n  connection.query(&#39;SET SESSION auto_increment_increment=1&#39;)\n});</code></pre>\n<h3 id=\"enqueue\">enqueue</h3>\n<p>The pool will emit an <code>enqueue</code> event when a callback has been queued to wait for\nan available connection.</p>\n<pre><code class=\"lang-js\">pool.on(&#39;enqueue&#39;, function () {\n  console.log(&#39;Waiting for available connection slot&#39;);\n});</code></pre>\n<h2 id=\"closing-all-the-connections-in-a-pool\">Closing all the connections in a pool</h2>\n<p>When you are done using the pool, you have to end all the connections or the\nNode.js event loop will stay active until the connections are closed by the\nMySQL server. This is typically done if the pool is used in a script or when\ntrying to gracefully shutdown a server. To end all the connections in the\npool, use the <code>end</code> method on the pool:</p>\n<pre><code class=\"lang-js\">pool.end(function (err) {\n  // all connections in the pool have ended\n});</code></pre>\n<p>The <code>end</code> method takes an <em>optional</em> callback that you can use to know once\nall the connections have ended. The connections end <em>gracefully</em>, so all\npending queries will still complete and the time to end the pool will vary.</p>\n<p><strong>Once <code>pool.end()</code> has been called, <code>pool.getConnection</code> and other operations\ncan no longer be performed</strong></p>\n<h2 id=\"poolcluster\">PoolCluster</h2>\n<p>PoolCluster provides multiple hosts connection. (group &amp; retry &amp; selector)</p>\n<pre><code class=\"lang-js\">// create\nvar poolCluster = mysql.createPoolCluster();\n\n// add configurations\npoolCluster.add(config); // anonymous group\npoolCluster.add(&#39;MASTER&#39;, masterConfig);\npoolCluster.add(&#39;SLAVE1&#39;, slave1Config);\npoolCluster.add(&#39;SLAVE2&#39;, slave2Config);\n\n// remove configurations\npoolCluster.remove(&#39;SLAVE2&#39;); // By nodeId\npoolCluster.remove(&#39;SLAVE*&#39;); // By target group : SLAVE1-2\n\n// Target Group : ALL(anonymous, MASTER, SLAVE1-2), Selector : round-robin(default)\npoolCluster.getConnection(function (err, connection) {});\n\n// Target Group : MASTER, Selector : round-robin\npoolCluster.getConnection(&#39;MASTER&#39;, function (err, connection) {});\n\n// Target Group : SLAVE1-2, Selector : order\n// If can&#39;t connect to SLAVE1, return SLAVE2. (remove SLAVE1 in the cluster)\npoolCluster.on(&#39;remove&#39;, function (nodeId) {\n  console.log(&#39;REMOVED NODE : &#39; + nodeId); // nodeId = SLAVE1 \n});\n\npoolCluster.getConnection(&#39;SLAVE*&#39;, &#39;ORDER&#39;, function (err, connection) {});\n\n// of namespace : of(pattern, selector)\npoolCluster.of(&#39;*&#39;).getConnection(function (err, connection) {});\n\nvar pool = poolCluster.of(&#39;SLAVE*&#39;, &#39;RANDOM&#39;);\npool.getConnection(function (err, connection) {});\npool.getConnection(function (err, connection) {});\n\n// close all connections\npoolCluster.end(function (err) {\n  // all connections in the pool cluster have ended\n});</code></pre>\n<h2 id=\"poolcluster-option\">PoolCluster Option</h2>\n<ul>\n<li><code>canRetry</code>: If <code>true</code>, <code>PoolCluster</code> will attempt to reconnect when connection fails. (Default: <code>true</code>)</li>\n<li><code>removeNodeErrorCount</code>: If connection fails, node&#39;s <code>errorCount</code> increases. \nWhen <code>errorCount</code> is greater than <code>removeNodeErrorCount</code>, remove a node in the <code>PoolCluster</code>. (Default: <code>5</code>)</li>\n<li><code>restoreNodeTimeout</code>: If connection fails, specifies the number of milliseconds\nbefore another connection attempt will be made. If set to <code>0</code>, then node will be\nremoved instead and never re-used. (Default: <code>0</code>)</li>\n<li><code>defaultSelector</code>: The default selector. (Default: <code>RR</code>)<ul>\n<li><code>RR</code>: Select one alternately. (Round-Robin)</li>\n<li><code>RANDOM</code>: Select the node by random function.</li>\n<li><code>ORDER</code>: Select the first node available unconditionally.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"lang-js\">var clusterConfig = {\n  removeNodeErrorCount: 1, // Remove the node immediately when connection fails.\n  defaultSelector: &#39;ORDER&#39;\n};\n\nvar poolCluster = mysql.createPoolCluster(clusterConfig);</code></pre>\n<h2 id=\"switching-users-and-altering-connection-state\">Switching users and altering connection state</h2>\n<p>MySQL offers a changeUser command that allows you to alter the current user and\nother aspects of the connection without shutting down the underlying socket:</p>\n<pre><code class=\"lang-js\">connection.changeUser({user : &#39;john&#39;}, function(err) {\n  if (err) throw err;\n});</code></pre>\n<p>The available options for this feature are:</p>\n<ul>\n<li><code>user</code>: The name of the new user (defaults to the previous one).</li>\n<li><code>password</code>: The password of the new user (defaults to the previous one).</li>\n<li><code>charset</code>: The new charset (defaults to the previous one).</li>\n<li><code>database</code>: The new database (defaults to the previous one).</li>\n</ul>\n<p>A sometimes useful side effect of this functionality is that this function also\nresets any connection state (variables, transactions, etc.).</p>\n<p>Errors encountered during this operation are treated as fatal connection errors\nby this module.</p>\n<h2 id=\"server-disconnects\">Server disconnects</h2>\n<p>You may lose the connection to a MySQL server due to network problems, the\nserver timing you out, the server being restarted, or crashing. All of these\nevents are considered fatal errors, and will have the <code>err.code =\n&#39;PROTOCOL_CONNECTION_LOST&#39;</code>.  See the <a href=\"#error-handling\">Error Handling</a> section\nfor more information.</p>\n<p>Re-connecting a connection is done by establishing a new connection. Once\nterminated, an existing connection object cannot be re-connected by design.</p>\n<p>With Pool, disconnected connections will be removed from the pool freeing up\nspace for a new connection to be created on the next getConnection call.</p>\n<h2 id=\"performing-queries\">Performing queries</h2>\n<p>The most basic way to perform a query is to call the <code>.query()</code> method on an object\n(like a <code>Connection</code> or <code>Pool</code> instance).</p>\n<p>The simplest form of .<code>query()</code> is <code>.query(sqlString, callback)</code>, where a SQL string\nis the first argument and the second is a callback:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;SELECT * FROM `books` WHERE `author` = &quot;David&quot;&#39;, function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});</code></pre>\n<p>The second form <code>.query(sqlString, values, callback)</code> comes when using\nplaceholder values (see <a href=\"#escaping-query-values\">escaping query values</a>):</p>\n<pre><code class=\"lang-js\">connection.query(&#39;SELECT * FROM `books` WHERE `author` = ?&#39;, [&#39;David&#39;], function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});</code></pre>\n<p>The third form <code>.query(options, callback)</code> comes when using various advanced\noptions on the query, like <a href=\"#escaping-query-values\">escaping query values</a>,\n<a href=\"#joins-with-overlapping-column-names\">joins with overlapping column names</a>,\n<a href=\"#timeout\">timeouts</a>, and <a href=\"#type-casting\">type casting</a>.</p>\n<pre><code class=\"lang-js\">connection.query({\n  sql: &#39;SELECT * FROM `books` WHERE `author` = ?&#39;,\n  timeout: 40000, // 40s\n  values: [&#39;David&#39;]\n}, function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});</code></pre>\n<p>Note that a combination of the second and third forms can be used where the\nplaceholder values are passes as an argument and not in the options object.\nThe <code>values</code> argument will override the <code>values</code> in the option object.</p>\n<pre><code class=\"lang-js\">connection.query({\n    sql: &#39;SELECT * FROM `books` WHERE `author` = ?&#39;,\n    timeout: 40000, // 40s\n  },\n  [&#39;David&#39;],\n  function (error, results, fields) {\n    // error will be an Error if one occurred during the query\n    // results will contain the results of the query\n    // fields will contain information about the returned results fields (if any)\n  }\n);</code></pre>\n<h2 id=\"escaping-query-values\">Escaping query values</h2>\n<p>In order to avoid SQL Injection attacks, you should always escape any user\nprovided data before using it inside a SQL query. You can do so using the\n<code>mysql.escape()</code>, <code>connection.escape()</code> or <code>pool.escape()</code> methods:</p>\n<pre><code class=\"lang-js\">var userId = &#39;some user provided value&#39;;\nvar sql    = &#39;SELECT * FROM users WHERE id = &#39; + connection.escape(userId);\nconnection.query(sql, function(err, results) {\n  // ...\n});</code></pre>\n<p>Alternatively, you can use <code>?</code> characters as placeholders for values you would\nlike to have escaped like this:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;SELECT * FROM users WHERE id = ?&#39;, [userId], function(err, results) {\n  // ...\n});</code></pre>\n<p>This looks similar to prepared statements in MySQL, however it really just uses\nthe same <code>connection.escape()</code> method internally.</p>\n<p><strong>Caution</strong> This also differs from prepared statements in that all <code>?</code> are\nreplaced, even those contained in comments and strings.</p>\n<p>Different value types are escaped differently, here is how:</p>\n<ul>\n<li>Numbers are left untouched</li>\n<li>Booleans are converted to <code>true</code> / <code>false</code></li>\n<li>Date objects are converted to <code>&#39;YYYY-mm-dd HH:ii:ss&#39;</code> strings</li>\n<li>Buffers are converted to hex strings, e.g. <code>X&#39;0fa5&#39;</code></li>\n<li>Strings are safely escaped</li>\n<li>Arrays are turned into list, e.g. <code>[&#39;a&#39;, &#39;b&#39;]</code> turns into <code>&#39;a&#39;, &#39;b&#39;</code></li>\n<li>Nested arrays are turned into grouped lists (for bulk inserts), e.g. <code>[[&#39;a&#39;,\n&#39;b&#39;], [&#39;c&#39;, &#39;d&#39;]]</code> turns into <code>(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)</code></li>\n<li>Objects are turned into <code>key = &#39;val&#39;</code> pairs for each enumerable property on\nthe object. If the property&#39;s value is a function, it is skipped; if the\nproperty&#39;s value is an object, toString() is called on it and the returned\nvalue is used.</li>\n<li><code>undefined</code> / <code>null</code> are converted to <code>NULL</code></li>\n<li><code>NaN</code> / <code>Infinity</code> are left as-is. MySQL does not support these, and trying\nto insert them as values will trigger MySQL errors until they implement\nsupport.</li>\n</ul>\n<p>If you paid attention, you may have noticed that this escaping allows you\nto do neat things like this:</p>\n<pre><code class=\"lang-js\">var post  = {id: 1, title: &#39;Hello MySQL&#39;};\nvar query = connection.query(&#39;INSERT INTO posts SET ?&#39;, post, function(err, result) {\n  // Neat!\n});\nconsole.log(query.sql); // INSERT INTO posts SET `id` = 1, `title` = &#39;Hello MySQL&#39;</code></pre>\n<p>If you feel the need to escape queries by yourself, you can also use the escaping\nfunction directly:</p>\n<pre><code class=\"lang-js\">var query = &quot;SELECT * FROM posts WHERE title=&quot; + mysql.escape(&quot;Hello MySQL&quot;);\n\nconsole.log(query); // SELECT * FROM posts WHERE title=&#39;Hello MySQL&#39;</code></pre>\n<h2 id=\"escaping-query-identifiers\">Escaping query identifiers</h2>\n<p>If you can&#39;t trust an SQL identifier (database / table / column name) because it is\nprovided by a user, you should escape it with <code>mysql.escapeId(identifier)</code>,\n<code>connection.escapeId(identifier)</code> or <code>pool.escapeId(identifier)</code> like this:</p>\n<pre><code class=\"lang-js\">var sorter = &#39;date&#39;;\nvar sql    = &#39;SELECT * FROM posts ORDER BY &#39; + connection.escapeId(sorter);\nconnection.query(sql, function(err, results) {\n  // ...\n});</code></pre>\n<p>It also supports adding qualified identifiers. It will escape both parts.</p>\n<pre><code class=\"lang-js\">var sorter = &#39;date&#39;;\nvar sql    = &#39;SELECT * FROM posts ORDER BY &#39; + connection.escapeId(&#39;posts.&#39; + sorter);\nconnection.query(sql, function(err, results) {\n  // ...\n});</code></pre>\n<p>Alternatively, you can use <code>??</code> characters as placeholders for identifiers you would\nlike to have escaped like this:</p>\n<pre><code class=\"lang-js\">var userId = 1;\nvar columns = [&#39;username&#39;, &#39;email&#39;];\nvar query = connection.query(&#39;SELECT ?? FROM ?? WHERE id = ?&#39;, [columns, &#39;users&#39;, userId], function(err, results) {\n  // ...\n});\n\nconsole.log(query.sql); // SELECT `username`, `email` FROM `users` WHERE id = 1</code></pre>\n<p><strong>Please note that this last character sequence is experimental and syntax might change</strong></p>\n<p>When you pass an Object to <code>.escape()</code> or <code>.query()</code>, <code>.escapeId()</code> is used to avoid SQL injection in object keys.</p>\n<h3 id=\"preparing-queries\">Preparing Queries</h3>\n<p>You can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:</p>\n<pre><code class=\"lang-js\">var sql = &quot;SELECT * FROM ?? WHERE ?? = ?&quot;;\nvar inserts = [&#39;users&#39;, &#39;id&#39;, userId];\nsql = mysql.format(sql, inserts);</code></pre>\n<p>Following this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.</p>\n<h3 id=\"custom-format\">Custom format</h3>\n<p>If you prefer to have another type of query escape format, there&#39;s a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in <code>.escape()</code> or any other connection function.</p>\n<p>Here&#39;s an example of how to implement another format:</p>\n<pre><code class=\"lang-js\">connection.config.queryFormat = function (query, values) {\n  if (!values) return query;\n  return query.replace(/\\:(\\w+)/g, function (txt, key) {\n    if (values.hasOwnProperty(key)) {\n      return this.escape(values[key]);\n    }\n    return txt;\n  }.bind(this));\n};\n\nconnection.query(&quot;UPDATE posts SET title = :title&quot;, { title: &quot;Hello MySQL&quot; });</code></pre>\n<h2 id=\"getting-the-id-of-an-inserted-row\">Getting the id of an inserted row</h2>\n<p>If you are inserting a row into a table with an auto increment primary key, you\ncan retrieve the insert id like this:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;INSERT INTO posts SET ?&#39;, {title: &#39;test&#39;}, function(err, result) {\n  if (err) throw err;\n\n  console.log(result.insertId);\n});</code></pre>\n<p>When dealing with big numbers (above JavaScript Number precision limit), you should\nconsider enabling <code>supportBigNumbers</code> option to be able to read the insert id as a\nstring, otherwise it will throw.</p>\n<p>This option is also required when fetching big numbers from the database, otherwise\nyou will get values rounded to hundreds or thousands due to the precision limit.</p>\n<h2 id=\"getting-the-number-of-affected-rows\">Getting the number of affected rows</h2>\n<p>You can get the number of affected rows from an insert, update or delete statement.</p>\n<pre><code class=\"lang-js\">connection.query(&#39;DELETE FROM posts WHERE title = &quot;wrong&quot;&#39;, function (err, result) {\n  if (err) throw err;\n\n  console.log(&#39;deleted &#39; + result.affectedRows + &#39; rows&#39;);\n})</code></pre>\n<h2 id=\"getting-the-number-of-changed-rows\">Getting the number of changed rows</h2>\n<p>You can get the number of changed rows from an update statement.</p>\n<p>&quot;changedRows&quot; differs from &quot;affectedRows&quot; in that it does not count updated rows\nwhose values were not changed.</p>\n<pre><code class=\"lang-js\">connection.query(&#39;UPDATE posts SET ...&#39;, function (err, result) {\n  if (err) throw err;\n\n  console.log(&#39;changed &#39; + result.changedRows + &#39; rows&#39;);\n})</code></pre>\n<h2 id=\"getting-the-connection-id\">Getting the connection ID</h2>\n<p>You can get the MySQL connection ID (&quot;thread ID&quot;) of a given connection using the <code>threadId</code>\nproperty.</p>\n<pre><code class=\"lang-js\">connection.connect(function(err) {\n  if (err) throw err;\n  console.log(&#39;connected as id &#39; + connection.threadId);\n});</code></pre>\n<h2 id=\"executing-queries-in-parallel\">Executing queries in parallel</h2>\n<p>The MySQL protocol is sequential, this means that you need multiple connections\nto execute queries in parallel. You can use a Pool to manage connections, one\nsimple approach is to create one connection per incoming http request.</p>\n<h2 id=\"streaming-query-rows\">Streaming query rows</h2>\n<p>Sometimes you may want to select large quantities of rows and process each of\nthem as they are received. This can be done like this:</p>\n<pre><code class=\"lang-js\">var query = connection.query(&#39;SELECT * FROM posts&#39;);\nquery\n  .on(&#39;error&#39;, function(err) {\n    // Handle error, an &#39;end&#39; event will be emitted after this as well\n  })\n  .on(&#39;fields&#39;, function(fields) {\n    // the field packets for the rows to follow\n  })\n  .on(&#39;result&#39;, function(row) {\n    // Pausing the connnection is useful if your processing involves I/O\n    connection.pause();\n\n    processRow(row, function() {\n      connection.resume();\n    });\n  })\n  .on(&#39;end&#39;, function() {\n    // all rows have been received\n  });</code></pre>\n<p>Please note a few things about the example above:</p>\n<ul>\n<li>Usually you will want to receive a certain amount of rows before starting to\nthrottle the connection using <code>pause()</code>. This number will depend on the\namount and size of your rows.</li>\n<li><code>pause()</code> / <code>resume()</code> operate on the underlying socket and parser. You are\nguaranteed that no more <code>&#39;result&#39;</code> events will fire after calling <code>pause()</code>.</li>\n<li>You MUST NOT provide a callback to the <code>query()</code> method when streaming rows.</li>\n<li>The <code>&#39;result&#39;</code> event will fire for both rows as well as OK packets\nconfirming the success of a INSERT/UPDATE query.</li>\n<li>It is very important not to leave the result paused too long, or you may\nencounter <code>Error: Connection lost: The server closed the connection.</code>\nThe time limit for this is determined by the\n<a href=\"https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_net_write_timeout\">net_write_timeout setting</a>\non your MySQL server.</li>\n</ul>\n<p>Additionally you may be interested to know that it is currently not possible to\nstream individual row columns, they will always be buffered up entirely. If you\nhave a good use case for streaming large fields to and from MySQL, I&#39;d love to\nget your thoughts and contributions on this.</p>\n<h3 id=\"piping-results-with-streams2\">Piping results with Streams2</h3>\n<p>The query object provides a convenience method <code>.stream([options])</code> that wraps\nquery events into a <a href=\"http://nodejs.org/api/stream.html#stream_class_stream_readable\">Readable</a>\n<a href=\"http://blog.nodejs.org/2012/12/20/streams2/\">Streams2</a> object. This\nstream can easily be piped downstream and provides automatic pause/resume,\nbased on downstream congestion and the optional <code>highWaterMark</code>. The\n<code>objectMode</code> parameter of the stream is set to <code>true</code> and cannot be changed\n(if you need a byte stream, you will need to use a transform stream, like\n<a href=\"https://www.npmjs.com/package/objstream\">objstream</a> for example).</p>\n<p>For example, piping query results into another stream (with a max buffer of 5\nobjects) is simply:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;SELECT * FROM posts&#39;)\n  .stream({highWaterMark: 5})\n  .pipe(...);</code></pre>\n<h2 id=\"multiple-statement-queries\">Multiple statement queries</h2>\n<p>Support for multiple statements is disabled for security reasons (it allows for\nSQL injection attacks if values are not properly escaped). To use this feature\nyou have to enable it for your connection:</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection({multipleStatements: true});</code></pre>\n<p>Once enabled, you can execute multiple statement queries like any other query:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;SELECT 1; SELECT 2&#39;, function(err, results) {\n  if (err) throw err;\n\n  // `results` is an array with one element for every statement in the query:\n  console.log(results[0]); // [{1: 1}]\n  console.log(results[1]); // [{2: 2}]\n});</code></pre>\n<p>Additionally you can also stream the results of multiple statement queries:</p>\n<pre><code class=\"lang-js\">var query = connection.query(&#39;SELECT 1; SELECT 2&#39;);\n\nquery\n  .on(&#39;fields&#39;, function(fields, index) {\n    // the fields for the result rows that follow\n  })\n  .on(&#39;result&#39;, function(row, index) {\n    // index refers to the statement this result belongs to (starts at 0)\n  });</code></pre>\n<p>If one of the statements in your query causes an error, the resulting Error\nobject contains a <code>err.index</code> property which tells you which statement caused\nit. MySQL will also stop executing any remaining statements when an error\noccurs.</p>\n<p>Please note that the interface for streaming multiple statement queries is\nexperimental and I am looking forward to feedback on it.</p>\n<h2 id=\"stored-procedures\">Stored procedures</h2>\n<p>You can call stored procedures from your queries as with any other mysql driver.\nIf the stored procedure produces several result sets, they are exposed to you\nthe same way as the results for multiple statement queries.</p>\n<h2 id=\"joins-with-overlapping-column-names\">Joins with overlapping column names</h2>\n<p>When executing joins, you are likely to get result sets with overlapping column\nnames.</p>\n<p>By default, node-mysql will overwrite colliding column names in the\norder the columns are received from MySQL, causing some of the received values\nto be unavailable.</p>\n<p>However, you can also specify that you want your columns to be nested below\nthe table name like this:</p>\n<pre><code class=\"lang-js\">var options = {sql: &#39;...&#39;, nestTables: true};\nconnection.query(options, function(err, results) {\n  /* results will be an array like this now:\n  [{\n    table1: {\n      fieldA: &#39;...&#39;,\n      fieldB: &#39;...&#39;,\n    },\n    table2: {\n      fieldA: &#39;...&#39;,\n      fieldB: &#39;...&#39;,\n    },\n  }, ...]\n  */\n});</code></pre>\n<p>Or use a string separator to have your results merged.</p>\n<pre><code class=\"lang-js\">var options = {sql: &#39;...&#39;, nestTables: &#39;_&#39;};\nconnection.query(options, function(err, results) {\n  /* results will be an array like this now:\n  [{\n    table1_fieldA: &#39;...&#39;,\n    table1_fieldB: &#39;...&#39;,\n    table2_fieldA: &#39;...&#39;,\n    table2_fieldB: &#39;...&#39;,\n  }, ...]\n  */\n});</code></pre>\n<h2 id=\"transactions\">Transactions</h2>\n<p>Simple transaction support is available at the connection level:</p>\n<pre><code class=\"lang-js\">connection.beginTransaction(function(err) {\n  if (err) { throw err; }\n  connection.query(&#39;INSERT INTO posts SET title=?&#39;, title, function(err, result) {\n    if (err) {\n      return connection.rollback(function() {\n        throw err;\n      });\n    }\n\n    var log = &#39;Post &#39; + result.insertId + &#39; added&#39;;\n\n    connection.query(&#39;INSERT INTO log SET data=?&#39;, log, function(err, result) {\n      if (err) {\n        return connection.rollback(function() {\n          throw err;\n        });\n      }  \n      connection.commit(function(err) {\n        if (err) {\n          return connection.rollback(function() {\n            throw err;\n          });\n        }\n        console.log(&#39;success!&#39;);\n      });\n    });\n  });\n});</code></pre>\n<p>Please note that beginTransaction(), commit() and rollback() are simply convenience\nfunctions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively.\nIt is important to understand that many commands in MySQL can cause an implicit commit,\nas described <a href=\"http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html\">in the MySQL documentation</a></p>\n<h2 id=\"ping\">Ping</h2>\n<p>A ping packet can be sent over a connection using the <code>connection.ping</code> method. This\nmethod will send a ping packet to the server and when the server responds, the callback\nwill fire. If an error occurred, the callback will fire with an error argument.</p>\n<pre><code class=\"lang-js\">connection.ping(function (err) {\n  if (err) throw err;\n  console.log(&#39;Server responded to ping&#39;);\n})</code></pre>\n<h2 id=\"timeouts\">Timeouts</h2>\n<p>Every operation takes an optional inactivity timeout option. This allows you to\nspecify appropriate timeouts for operations. It is important to note that these\ntimeouts are not part of the MySQL protocol, and rather timeout operations through\nthe client. This means that when a timeout is reached, the connection it occurred\non will be destroyed and no further operations can be performed.</p>\n<pre><code class=\"lang-js\">// Kill query after 60s\nconnection.query({sql: &#39;SELECT COUNT(*) AS count FROM big_table&#39;, timeout: 60000}, function (err, rows) {\n  if (err &amp;&amp; err.code === &#39;PROTOCOL_SEQUENCE_TIMEOUT&#39;) {\n    throw new Error(&#39;too long to count table rows!&#39;);\n  }\n\n  if (err) {\n    throw err;\n  }\n\n  console.log(rows[0].count + &#39; rows&#39;);\n});</code></pre>\n<h2 id=\"error-handling\">Error handling</h2>\n<p>This module comes with a consistent approach to error handling that you should\nreview carefully in order to write solid applications.</p>\n<p>All errors created by this module are instances of the JavaScript <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>\nobject. Additionally they come with two properties:</p>\n<ul>\n<li><code>err.code</code>: Either a <a href=\"http://dev.mysql.com/doc/refman/5.5/en/error-messages-server.html\">MySQL server error</a> (e.g.\n<code>&#39;ER_ACCESS_DENIED_ERROR&#39;</code>), a node.js error (e.g. <code>&#39;ECONNREFUSED&#39;</code>) or an\ninternal error (e.g.  <code>&#39;PROTOCOL_CONNECTION_LOST&#39;</code>).</li>\n<li><code>err.fatal</code>: Boolean, indicating if this error is terminal to the connection\nobject.</li>\n</ul>\n<p>Fatal errors are propagated to <em>all</em> pending callbacks. In the example below, a\nfatal error is triggered by trying to connect to an invalid port. Therefore the\nerror object is propagated to both pending callbacks:</p>\n<pre><code class=\"lang-js\">var connection = require(&#39;mysql&#39;).createConnection({\n  port: 84943, // WRONG PORT\n});\n\nconnection.connect(function(err) {\n  console.log(err.code); // &#39;ECONNREFUSED&#39;\n  console.log(err.fatal); // true\n});\n\nconnection.query(&#39;SELECT 1&#39;, function(err) {\n  console.log(err.code); // &#39;ECONNREFUSED&#39;\n  console.log(err.fatal); // true\n});</code></pre>\n<p>Normal errors however are only delegated to the callback they belong to.  So in\nthe example below, only the first callback receives an error, the second query\nworks as expected:</p>\n<pre><code class=\"lang-js\">connection.query(&#39;USE name_of_db_that_does_not_exist&#39;, function(err, rows) {\n  console.log(err.code); // &#39;ER_BAD_DB_ERROR&#39;\n});\n\nconnection.query(&#39;SELECT 1&#39;, function(err, rows) {\n  console.log(err); // null\n  console.log(rows.length); // 1\n});</code></pre>\n<p>Last but not least: If a fatal errors occurs and there are no pending\ncallbacks, or a normal error occurs which has no callback belonging to it, the\nerror is emitted as an <code>&#39;error&#39;</code> event on the connection object. This is\ndemonstrated in the example below:</p>\n<pre><code class=\"lang-js\">connection.on(&#39;error&#39;, function(err) {\n  console.log(err.code); // &#39;ER_BAD_DB_ERROR&#39;\n});\n\nconnection.query(&#39;USE name_of_db_that_does_not_exist&#39;);</code></pre>\n<p>Note: <code>&#39;error&#39;</code> events are special in node. If they occur without an attached\nlistener, a stack trace is printed and your process is killed.</p>\n<p><strong>tl;dr:</strong> This module does not want you to deal with silent failures. You\nshould always provide callbacks to your method calls. If you want to ignore\nthis advice and suppress unhandled errors, you can do this:</p>\n<pre><code class=\"lang-js\">// I am Chuck Norris:\nconnection.on(&#39;error&#39;, function() {});</code></pre>\n<h2 id=\"exception-safety\">Exception Safety</h2>\n<p>This module is exception safe. That means you can continue to use it, even if\none of your callback functions throws an error which you&#39;re catching using\n&#39;uncaughtException&#39; or a domain.</p>\n<h2 id=\"type-casting\">Type casting</h2>\n<p>For your convenience, this driver will cast mysql types into native JavaScript\ntypes by default. The following mappings exist:</p>\n<h3 id=\"number\">Number</h3>\n<ul>\n<li>TINYINT</li>\n<li>SMALLINT</li>\n<li>INT</li>\n<li>MEDIUMINT</li>\n<li>YEAR</li>\n<li>FLOAT</li>\n<li>DOUBLE</li>\n</ul>\n<h3 id=\"date\">Date</h3>\n<ul>\n<li>TIMESTAMP</li>\n<li>DATE</li>\n<li>DATETIME</li>\n</ul>\n<h3 id=\"buffer\">Buffer</h3>\n<ul>\n<li>TINYBLOB</li>\n<li>MEDIUMBLOB</li>\n<li>LONGBLOB</li>\n<li>BLOB</li>\n<li>BINARY</li>\n<li>VARBINARY</li>\n<li>BIT (last byte will be filled with 0 bits as necessary)</li>\n</ul>\n<h3 id=\"string\">String</h3>\n<p><strong>Note</strong> text in the binary character set is returned as <code>Buffer</code>, rather\nthan a string.</p>\n<ul>\n<li>CHAR</li>\n<li>VARCHAR</li>\n<li>TINYTEXT</li>\n<li>MEDIUMTEXT</li>\n<li>LONGTEXT</li>\n<li>TEXT</li>\n<li>ENUM</li>\n<li>SET</li>\n<li>DECIMAL (may exceed float precision)</li>\n<li>BIGINT (may exceed float precision)</li>\n<li>TIME (could be mapped to Date, but what date would be set?)</li>\n<li>GEOMETRY (never used those, get in touch if you do)</li>\n</ul>\n<p>It is not recommended (and may go away / change in the future) to disable type\ncasting, but you can currently do so on either the connection:</p>\n<pre><code class=\"lang-js\">var connection = require(&#39;mysql&#39;).createConnection({typeCast: false});</code></pre>\n<p>Or on the query level:</p>\n<pre><code class=\"lang-js\">var options = {sql: &#39;...&#39;, typeCast: false};\nvar query = connection.query(options, function(err, results) {\n\n});</code></pre>\n<p>You can also pass a function and handle type casting yourself. You&#39;re given some\ncolumn information like database, table and name and also type and length. If you\njust want to apply a custom type casting to a specific type you can do it and then\nfallback to the default. Here&#39;s an example of converting <code>TINYINT(1)</code> to boolean:</p>\n<pre><code class=\"lang-js\">connection.query({\n  sql: &#39;...&#39;,\n  typeCast: function (field, next) {\n    if (field.type == &#39;TINY&#39; &amp;&amp; field.length == 1) {\n      return (field.string() == &#39;1&#39;); // 1 = true, 0 = false\n    }\n    return next();\n  }\n});</code></pre>\n<p><strong>WARNING: YOU MUST INVOKE the parser using one of these three field functions in your custom typeCast callback. They can only be called once. (see <a href=\"https://github.com/felixge/node-mysql/issues/539\">#539</a> for discussion)</strong></p>\n<pre><code>field.string()\nfield.buffer()\nfield.geometry()</code></pre>\n<p>are aliases for</p>\n<pre><code>parser.parseLengthCodedString()\nparser.parseLengthCodedBuffer()\nparser.parseGeometryValue()</code></pre>\n<p><strong>You can find which field function you need to use by looking at: <a href=\"https://github.com/felixge/node-mysql/blob/master/lib/protocol/packets/RowDataPacket.js#L41\">RowDataPacket.prototype._typeCast</a></strong></p>\n<h2 id=\"connection-flags\">Connection Flags</h2>\n<p>If, for any reason, you would like to change the default connection flags, you\ncan use the connection option <code>flags</code>. Pass a string with a comma separated list\nof items to add to the default flags. If you don&#39;t want a default flag to be used\nprepend the flag with a minus sign. To add a flag that is not in the default list,\njust write the flag name, or prefix it with a plus (case insensitive).</p>\n<p><strong>Please note that some available flags that are not supported (e.g.: Compression),\nare still not allowed to be specified.</strong></p>\n<h3 id=\"example\">Example</h3>\n<p>The next example blacklists FOUND_ROWS flag from default connection flags.</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection(&quot;mysql://localhost/test?flags=-FOUND_ROWS&quot;);</code></pre>\n<h3 id=\"default-flags\">Default Flags</h3>\n<p>The following flags are sent by default on a new connection:</p>\n<ul>\n<li><code>CONNECT_WITH_DB</code> - Ability to specify the database on connection.</li>\n<li><code>FOUND_ROWS</code> - Send the found rows instead of the affected rows as <code>affectedRows</code>.</li>\n<li><code>IGNORE_SIGPIPE</code> - Old; no effect.</li>\n<li><code>IGNORE_SPACE</code> - Let the parser ignore spaces before the <code>(</code> in queries.</li>\n<li><code>LOCAL_FILES</code> - Can use <code>LOAD DATA LOCAL</code>.</li>\n<li><code>LONG_FLAG</code></li>\n<li><code>LONG_PASSWORD</code> - Use the improved version of Old Password Authentication.</li>\n<li><code>MULTI_RESULTS</code> - Can handle multiple resultsets for COM_QUERY.</li>\n<li><code>ODBC</code> Old; no effect.</li>\n<li><code>PROTOCOL_41</code> - Uses the 4.1 protocol.</li>\n<li><code>PS_MULTI_RESULTS</code> - Can handle multiple resultsets for COM_STMT_EXECUTE.</li>\n<li><code>RESERVED</code> - Old flag for the 4.1 protocol.</li>\n<li><code>SECURE_CONNECTION</code> - Support native 4.1 authentication.</li>\n<li><code>TRANSACTIONS</code> - Asks for the transaction status flags.</li>\n</ul>\n<p>In addition, the following flag will be sent if the option <code>multipleStatements</code>\nis set to <code>true</code>:</p>\n<ul>\n<li><code>MULTI_STATEMENTS</code> - The client may send multiple statement per query or\nstatement prepare.</li>\n</ul>\n<h3 id=\"other-available-flags\">Other Available Flags</h3>\n<p>There are other flags available. They may or may not function, but are still\navailable to specify.</p>\n<ul>\n<li>COMPRESS</li>\n<li>INTERACTIVE</li>\n<li>NO_SCHEMA</li>\n<li>PLUGIN_AUTH</li>\n<li>REMEMBER_OPTIONS</li>\n<li>SSL</li>\n<li>SSL_VERIFY_SERVER_CERT</li>\n</ul>\n<h2 id=\"debugging-and-reporting-problems\">Debugging and reporting problems</h2>\n<p>If you are running into problems, one thing that may help is enabling the\n<code>debug</code> mode for the connection:</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection({debug: true});</code></pre>\n<p>This will print all incoming and outgoing packets on stdout. You can also restrict debugging to\npacket types by passing an array of types to debug:</p>\n<pre><code class=\"lang-js\">var connection = mysql.createConnection({debug: [&#39;ComQueryPacket&#39;, &#39;RowDataPacket&#39;]});</code></pre>\n<p>to restrict debugging to the query and data packets.</p>\n<p>If that does not help, feel free to open a GitHub issue. A good GitHub issue\nwill have:</p>\n<ul>\n<li>The minimal amount of code required to reproduce the problem (if possible)</li>\n<li>As much debugging output and information about your environment (mysql\nversion, node version, os, etc.) as you can gather.</li>\n</ul>\n<h2 id=\"running-tests\">Running tests</h2>\n<p>The test suite is split into two parts: unit tests and integration tests.\nThe unit tests run on any machine while the integration tests require a\nMySQL server instance to be setup.</p>\n<h3 id=\"running-unit-tests\">Running unit tests</h3>\n<pre><code class=\"lang-sh\">$ FILTER=unit npm test</code></pre>\n<h3 id=\"running-integration-tests\">Running integration tests</h3>\n<p>Set the environment variables <code>MYSQL_DATABASE</code>, <code>MYSQL_HOST</code>, <code>MYSQL_PORT</code>,\n<code>MYSQL_USER</code> and <code>MYSQL_PASSWORD</code>. Then run <code>npm test</code>.</p>\n<p>For example, if you have an installation of mysql running on localhost:3306\nand no password set for the <code>root</code> user, run:</p>\n<pre><code class=\"lang-sh\">$ mysql -u root -e &quot;CREATE DATABASE IF NOT EXISTS node_mysql_test&quot;\n$ MYSQL_HOST=localhost MYSQL_PORT=3306 MYSQL_DATABASE=node_mysql_test MYSQL_USER=root MYSQL_PASSWORD= FILTER=integration npm test</code></pre>\n<h2 id=\"todo\">Todo</h2>\n<ul>\n<li>Prepared statements</li>\n<li>Support for encodings other than UTF-8 / ASCII</li>\n</ul>\n',0),(11,'the open-source application container engine',1457801974,NULL,23,0,0,1,1,'Docker: the container engine [![Release](https://img.shields.io/github/release/docker/docker.svg)](https://github.com/docker/docker/releases/latest)\n============================\n\nDocker is an open source project to pack, ship and run any application\nas a lightweight container.\n\nDocker containers are both *hardware-agnostic* and *platform-agnostic*.\nThis means they can run anywhere, from your laptop to the largest\ncloud compute instance and everything in between - and they don\'t require\nyou to use a particular language, framework or packaging system. That\nmakes them great building blocks for deploying and scaling web apps,\ndatabases, and backend services without depending on a particular stack\nor provider.\n\nDocker began as an open-source implementation of the deployment engine which\npowers [dotCloud](https://www.dotcloud.com), a popular Platform-as-a-Service.\nIt benefits directly from the experience accumulated over several years\nof large-scale operation and support of hundreds of thousands of\napplications and databases.\n\n![](docs/static_files/docker-logo-compressed.png \"Docker\")\n\n## Security Disclosure\n\nSecurity is very important to us. If you have any issue regarding security, \nplease disclose the information responsibly by sending an email to \nsecurity@docker.com and not by creating a github issue.\n\n## Better than VMs\n\nA common method for distributing applications and sandboxing their\nexecution is to use virtual machines, or VMs. Typical VM formats are\nVMware\'s vmdk, Oracle VirtualBox\'s vdi, and Amazon EC2\'s ami. In theory\nthese formats should allow every developer to automatically package\ntheir application into a \"machine\" for easy distribution and deployment.\nIn practice, that almost never happens, for a few reasons:\n\n  * *Size*: VMs are very large which makes them impractical to store\n     and transfer.\n  * *Performance*: running VMs consumes significant CPU and memory,\n    which makes them impractical in many scenarios, for example local\n    development of multi-tier applications, and large-scale deployment\n    of cpu and memory-intensive applications on large numbers of\n    machines.\n  * *Portability*: competing VM environments don\'t play well with each\n     other. Although conversion tools do exist, they are limited and\n     add even more overhead.\n  * *Hardware-centric*: VMs were designed with machine operators in\n    mind, not software developers. As a result, they offer very\n    limited tooling for what developers need most: building, testing\n    and running their software. For example, VMs offer no facilities\n    for application versioning, monitoring, configuration, logging or\n    service discovery.\n\nBy contrast, Docker relies on a different sandboxing method known as\n*containerization*. Unlike traditional virtualization, containerization\ntakes place at the kernel level. Most modern operating system kernels\nnow support the primitives necessary for containerization, including\nLinux with [openvz](https://openvz.org),\n[vserver](http://linux-vserver.org) and more recently\n[lxc](https://linuxcontainers.org/), Solaris with\n[zones](https://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc),\nand FreeBSD with\n[Jails](https://www.freebsd.org/doc/handbook/jails.html).\n\nDocker builds on top of these low-level primitives to offer developers a\nportable format and runtime environment that solves all four problems.\nDocker containers are small (and their transfer can be optimized with\nlayers), they have basically zero memory and cpu overhead, they are\ncompletely portable, and are designed from the ground up with an\napplication-centric design.\n\nPerhaps best of all, because Docker operates at the OS level, it can still be\nrun inside a VM!\n\n## Plays well with others\n\nDocker does not require you to buy into a particular programming\nlanguage, framework, packaging system, or configuration language.\n\nIs your application a Unix process? Does it use files, tcp connections,\nenvironment variables, standard Unix streams and command-line arguments\nas inputs and outputs? Then Docker can run it.\n\nCan your application\'s build be expressed as a sequence of such\ncommands? Then Docker can build it.\n\n## Escape dependency hell\n\nA common problem for developers is the difficulty of managing all\ntheir application\'s dependencies in a simple and automated way.\n\nThis is usually difficult for several reasons:\n\n  * *Cross-platform dependencies*. Modern applications often depend on\n    a combination of system libraries and binaries, language-specific\n    packages, framework-specific modules, internal components\n    developed for another project, etc. These dependencies live in\n    different \"worlds\" and require different tools - these tools\n    typically don\'t work well with each other, requiring awkward\n    custom integrations.\n\n  * *Conflicting dependencies*. Different applications may depend on\n    different versions of the same dependency. Packaging tools handle\n    these situations with various degrees of ease - but they all\n    handle them in different and incompatible ways, which again forces\n    the developer to do extra work.\n\n  * *Custom dependencies*. A developer may need to prepare a custom\n    version of their application\'s dependency. Some packaging systems\n    can handle custom versions of a dependency, others can\'t - and all\n    of them handle it differently.\n\n\nDocker solves the problem of dependency hell by giving the developer a simple\nway to express *all* their application\'s dependencies in one place, while\nstreamlining the process of assembling them. If this makes you think of\n[XKCD 927](https://xkcd.com/927/), don\'t worry. Docker doesn\'t\n*replace* your favorite packaging systems. It simply orchestrates\ntheir use in a simple and repeatable way. How does it do that? With\nlayers.\n\nDocker defines a build as running a sequence of Unix commands, one\nafter the other, in the same container. Build commands modify the\ncontents of the container (usually by installing new files on the\nfilesystem), the next command modifies it some more, etc. Since each\nbuild command inherits the result of the previous commands, the\n*order* in which the commands are executed expresses *dependencies*.\n\nHere\'s a typical Docker build process:\n\n```bash\nFROM ubuntu:12.04\nRUN apt-get update && apt-get install -y python python-pip curl\nRUN curl -sSL https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv\nRUN cd helloflask-master && pip install -r requirements.txt\n```\n\nNote that Docker doesn\'t care *how* dependencies are built - as long\nas they can be built by running a Unix command in a container.\n\n\nGetting started\n===============\n\nDocker can be installed either on your computer for building applications or\non servers for running them. To get started, [check out the installation\ninstructions in the\ndocumentation](https://docs.docker.com/engine/installation/).\n\nWe also offer an [interactive tutorial](https://www.docker.com/tryit/)\nfor quickly learning the basics of using Docker.\n\nUsage examples\n==============\n\nDocker can be used to run short-lived commands, long-running daemons\n(app servers, databases, etc.), interactive shell sessions, etc.\n\nYou can find a [list of real-world\nexamples](https://docs.docker.com/engine/examples/) in the\ndocumentation.\n\nUnder the hood\n--------------\n\nUnder the hood, Docker is built on the following components:\n\n* The\n  [cgroups](https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt)\n  and\n  [namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html)\n  capabilities of the Linux kernel\n* The [Go](https://golang.org) programming language\n* The [Docker Image Specification](https://github.com/docker/docker/blob/master/image/spec/v1.md)\n* The [Libcontainer Specification](https://github.com/opencontainers/runc/blob/master/libcontainer/SPEC.md)\n\nContributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)\n======================\n\n| **Master** (Linux) | **Experimental** (linux) | **Windows** | **FreeBSD** |\n|------------------|----------------------|---------|---------|\n| [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/) | [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/) |\n\nWant to hack on Docker? Awesome! We have [instructions to help you get\nstarted contributing code or documentation](https://docs.docker.com/opensource/project/who-written-for/).\n\nThese instructions are probably not perfect, please let us know if anything\nfeels wrong or incomplete. Better yet, submit a PR and improve them yourself.\n\nGetting the development builds\n==============================\n\nWant to run Docker from a master build? You can download \nmaster builds at [master.dockerproject.org](https://master.dockerproject.org). \nThey are updated with each commit merged into the master branch.\n\nDon\'t know how to use that super cool new feature in the master build? Check\nout the master docs at\n[docs.master.dockerproject.org](http://docs.master.dockerproject.org).\n\nHow the project is run\n======================\n\nDocker is a very, very active project. If you want to learn more about how it is run,\nor want to get more involved, the best place to start is [the project directory](https://github.com/docker/docker/tree/master/project).\n\nWe are always open to suggestions on process improvements, and are always looking for more maintainers.\n\n### Talking to other Docker users and contributors\n\n<table class=\"tg\">\n  <col width=\"45%\">\n  <col width=\"65%\">\n  <tr>\n    <td>Internet&nbsp;Relay&nbsp;Chat&nbsp;(IRC)</td>\n    <td>\n      <p>\n        IRC is a direct line to our most knowledgeable Docker users; we have\n        both the  <code>#docker</code> and <code>#docker-dev</code> group on\n        <strong>irc.freenode.net</strong>.\n        IRC is a rich chat protocol but it can overwhelm new users. You can search\n        <a href=\"https://botbot.me/freenode/docker/#\" target=\"_blank\">our chat archives</a>.\n      </p>\n      Read our <a href=\"https://docs.docker.com/project/get-help/#irc-quickstart\" target=\"_blank\">IRC quickstart guide</a> for an easy way to get started.\n    </td>\n  </tr>\n  <tr>\n    <td>Google Groups</td>\n    <td>\n      There are two groups.\n      <a href=\"https://groups.google.com/forum/#!forum/docker-user\" target=\"_blank\">Docker-user</a>\n      is for people using Docker containers.\n      The <a href=\"https://groups.google.com/forum/#!forum/docker-dev\" target=\"_blank\">docker-dev</a>\n      group is for contributors and other people contributing to the Docker\n      project.\n      You can join them without an google account by sending an email to e.g. \"docker-user+subscribe@googlegroups.com\".\n      After receiving the join-request message, you can simply reply to that to confirm the subscribtion.\n    </td>\n  </tr>\n  <tr>\n    <td>Twitter</td>\n    <td>\n      You can follow <a href=\"https://twitter.com/docker/\" target=\"_blank\">Docker\'s Twitter feed</a>\n      to get updates on our products. You can also tweet us questions or just\n      share blogs or stories.\n    </td>\n  </tr>\n  <tr>\n    <td>Stack Overflow</td>\n    <td>\n      Stack Overflow has over 7000 Docker questions listed. We regularly\n      monitor <a href=\"https://stackoverflow.com/search?tab=newest&q=docker\" target=\"_blank\">Docker questions</a>\n      and so do many other knowledgeable Docker users.\n    </td>\n  </tr>\n</table>\n\n### Legal\n\n*Brought to you courtesy of our legal counsel. For more context,\nplease see the [NOTICE](https://github.com/docker/docker/blob/master/NOTICE) document in this repo.*\n\nUse and transfer of Docker may be subject to certain restrictions by the\nUnited States and other governments.\n\nIt is your responsibility to ensure that your use and/or transfer does not\nviolate applicable laws.\n\nFor more information, please see https://www.bis.doc.gov\n\n\nLicensing\n=========\nDocker is licensed under the Apache License, Version 2.0. See\n[LICENSE](https://github.com/docker/docker/blob/master/LICENSE) for the full\nlicense text.\n\nOther Docker Related Projects\n=============================\nThere are a number of projects under development that are based on Docker\'s\ncore technology. These projects expand the tooling built around the\nDocker platform to broaden its application and utility.\n\n* [Docker Registry](https://github.com/docker/distribution): Registry \nserver for Docker (hosting/delivery of repositories and images)\n* [Docker Machine](https://github.com/docker/machine): Machine management \nfor a container-centric world\n* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering \nsystem\n* [Docker Compose](https://github.com/docker/compose) (formerly Fig): \nDefine and run multi-container apps\n* [Kitematic](https://github.com/docker/kitematic): The easiest way to use \nDocker on Mac and Windows\n\nIf you know of another project underway that should be listed here, please help \nus keep this list up-to-date by submitting a PR.\n\nAwesome-Docker\n==============\nYou can find more projects, tools and articles related to Docker on the [awesome-docker list](https://github.com/veggiemonk/awesome-docker). Add your project there.',0),(12,'haha',1457831627,NULL,2,0,0,1,1,'haha',0),(13,'123',1457831671,NULL,0,0,0,1,1,'312',0),(14,'123',1457831699,NULL,2,0,0,1,1,'312',0),(15,'123',1457831707,NULL,2,0,0,1,1,'321312',0),(16,'eqw',1457831902,NULL,3,0,0,1,1,'eqw',0),(17,'213',1457831927,NULL,1,0,0,1,1,'321',0),(18,'你好啊',1457832723,NULL,26,0,0,1,1,'今天我们来介绍下一个的暗转',0),(19,'haha',1457832793,NULL,24,0,0,1,1,'haha',0),(20,'',1457833603,NULL,20,0,0,1,1,'',0),(21,'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',1457833711,NULL,9232,0,0,1,1,'',0),(22,'123321312',1458396209,NULL,7,0,0,1,1,'321321',0),(23,'12312312',1458397316,NULL,6,0,0,1,1,'321312\n```\n1231321\n```\n1312312',0),(24,'123',1458397359,NULL,6,0,0,1,1,'321\n```\n12321\n`12121',0),(25,'123',1458397387,NULL,14,0,0,1,1,'321321',0),(26,'haha  nihao a',1458643433,NULL,14,0,0,1,1,'```\nthis is a code\n```\n\n#hello\n\ntoday',0),(27,'第一篇文章',1458968031,NULL,15,0,0,1,1,'我的第一篇文章',0),(28,'123213213',1458968082,NULL,6,0,0,1,1,'3213213213',0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `create_time` bigint(20) NOT NULL,
  `create_ip` char(15) DEFAULT NULL,
  `name` varchar(20) NOT NULL,
  `email` varchar(36) DEFAULT NULL,
  `content` varchar(1024) NOT NULL,
  `status` tinyint(2) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (1,20,1457842616,NULL,'tome','smile@aoyel.com','haha',1),(2,21,1457844154,NULL,'213','3213','321312',1),(3,21,1457844175,NULL,'啊啊啊','按时打算','的撒大声',1),(4,21,1457844378,NULL,'some ','smile@aoyel.com','This is somejk',1),(5,21,1457844473,NULL,'hello','smile@aoyel.com','```\ncode\n```\n# this is a jock\n[we](http://cc.cc)\n\n',1),(6,21,1457844511,NULL,'thisis','smile@aoyel.com','```\nvar c = this.get\n```',1),(7,21,1458017645,NULL,'hah ','hah','haha',1),(8,21,1458228114,NULL,'you','smile@aoyel.com','sad',1),(9,21,1458391126,NULL,'3123','321312@qq.com','321312',1),(10,21,1458391176,NULL,'31231','321312@qq.com','321312',1),(11,21,1458391186,NULL,'1111111111','11@qq.com','1233',1),(12,19,1458391222,NULL,'123123','3213@qq.com','12321312',1),(13,19,1458391233,NULL,'123312','321312@qq.com','312312',1),(14,19,1458391596,NULL,'213','321@qq.com','321312',1),(15,19,1458391872,NULL,'123','3232@qq','3232',1),(16,10,1458392195,NULL,'nihao','nizainali@qq.com','nishi',1),(17,10,1458392224,NULL,'zhege henhaoa','','<script>alert(ok)</script>',1),(18,1,1458398436,NULL,'123','12231@qq','312312',1),(19,10,1458962619,NULL,'3213','312321@qq','123',1),(20,10,1458962628,NULL,'321321','321312@qq.com','321312',1),(21,10,1458962639,NULL,'3333','3212@qq.com','3232',1),(22,10,1458962677,NULL,'1111','11@qq.com','2',1),(23,10,1458962683,NULL,'22222222222','3232@qq','23232',1),(24,10,1458962684,NULL,'','','',1),(25,10,1458962684,NULL,'','','',1),(26,10,1458962685,NULL,'','','',1),(27,10,1458962685,NULL,'','','',1),(28,11,1458965133,NULL,'1212','3332@11','123',1),(29,11,1458965898,NULL,'12','321312@qq.com','3213',1),(30,21,1458968392,NULL,'12212','2121@qq','2121',1),(31,28,1458993960,NULL,'nihaoa','nizainali@qq.com','nihaoa',1);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(36) NOT NULL,
  `create_time` bigint(20) NOT NULL,
  `count` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag_link`
--

DROP TABLE IF EXISTS `tag_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  `create_time` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag_link`
--

LOCK TABLES `tag_link` WRITE;
/*!40000 ALTER TABLE `tag_link` DISABLE KEYS */;
/*!40000 ALTER TABLE `tag_link` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-03-26 20:29:20
